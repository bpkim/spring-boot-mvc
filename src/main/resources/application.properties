#json > object 변환 : deserialization
#object > json 변환 : serialization

# 알려지지 않은 것이 있으면 실패 > badRequest 발생 400 에러
spring.jackson.deserialization.fail-on-unknown-properties=true

spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:h2:~/test
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.hikari.maximum-pool-size=4

spring.jpa.properties.hiberate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hiberate.format_sql=true
spring.jpa.hibernate.ddl-auto=create-drop

#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.spl.BasicBinder=TRACE

logging.level.org.springframework.security=INFO

## property에 설정하면 lobback-spring.xml 에 넣은게 안먹는다.
logging.level.jdbc=info
# sql 문을 로그로 남긴다.
logging.level.jdbc.sqlonly=off
# sqla 문가 수행된 시간을 로그로 남긴다.
logging.level.jdbc.sqltiming=info
# 조회된 결과를 테이블 형식으로 보여준다.함
logging.level.jdbc.resultsettable=info
# resultset을 제외한 jdbc 호출 정보를 로그로 남긴다.
logging.level.jdbc.audit=off
# resultset을 포한 jdbc 호출 정보를 로그로 남긴다.
logging.level.jdbc.resultset=info
logging.level.jdbc.connection=off


my-app.admin-username=admin
my-app.admin-password=qwer
my-app.user-username=user
my-app.user-password=qwer
my-app.client-id=myApp
my-app.client-secret=pass

server.port=8888

#(**템플릿 시작 위치 참조)
#spring.thymeleaf.prefix=classpath:templates/
#(**템플릿의 확장자 이름 참조)
spring.thymeleaf.suffix=.html
#**해당위치에 파일이 있는지 없는지 체크
spring.thymeleaf.check-template-location=true
##**캐시를 남기지 않는다.
spring.thymeleaf.cache=false

